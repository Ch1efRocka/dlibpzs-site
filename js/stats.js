document.addEventListener("DOMContentLoaded", () => {
    const statsSection = document.querySelector("#stats");

    const endpoints = [
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=relics_percent&min=0.1",
            title: "üîÆ –ò—Å–∫–∞—Ç–µ–ª–∏ —Ä–µ–ª–∏–∫–≤–∏–π",
            type: "relics_percent"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=bricks_cnt&max=999",
            title: "üß± –ö–∞–º–µ–Ω—å –∫ –∫–∞–º–Ω—é",
            type: "bricks_cnt"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=wood_cnt&max=999",
            title: "üå≥ –î—Ä–æ–≤–æ—Å–µ–∫–∏ –¥–æ 100%",
            type: "wood_cnt"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=wood_cnt",
            title: "üå≥ –ì–ª–∞–≤–Ω—ã–µ –¥—Ä–æ–≤–æ—Å–µ–∫–∏ –ª–µ—Å–∞",
            type: "wood_cnt"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=ark&max=1999",
            title: "üõ≥Ô∏è –ú–æ—Ä–µ—Ö–æ–¥—ã",
            type: "ark"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=words",
            title: "üìö –ü–∏—Å–∞—Ç–µ–ª–∏",
            type: "words"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=souls_percent&max=99.9&min=0.1",
            title: "üëª –î—É—à–µ–ª–æ–≤—Ü—ã",
            type: "souls_percent"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=savings&max=29999999",
            title: "üí∞ –ë—É–¥—É—â–∏–µ –ª–∞–≤–æ—á–Ω–∏–∫–∏",
            type: "savings"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=t_level&min=1",
            title: "üõí –ë–∞–∑–∞—Ä–Ω—ã–µ –±–æ–≥–∏",
            type: "t_level"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=arena&min=0.1",
            title: "üèüÔ∏è –ó–≤–µ–∑–¥—ã –ö–æ–ª–∏–∑–µ—è",
            type: "arena"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=boss",
            title: "üëπ –û—Ö–æ—Ç–Ω–∏–∫–∏ –Ω–∞ –±–æ—Å—Å–æ–≤",
            type: "boss"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=pet",
            title: "üêæ –ü–∏—Ç–æ–º—Ü–µ–í–µ–¥—ã",
            type: "pet"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=level",
            title: "üéì –û–ª–∏–º–ø —Å–∏–ª—å–Ω–µ–π—à–∏—Ö –±–æ—Ä—Ü–æ–≤ —Å–æ –∑–¥—Ä–∞–≤—ã–º —Å–º—ã—Å–ª–æ–º",
            type: "level"
        },
        {
            url: "https://ch1efrocka.ru/api/stats/resources?type=alignment",
            title: "‚öñÔ∏è –°—Ç—Ä–∞–∂–∏ –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª–∏",
            type: "alignment"
        }
    ];

    const filterInput = document.createElement("input");
    filterInput.type = "text";
    filterInput.placeholder = "üîç –ù–∞–π—Ç–∏ –±–æ–≥–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö: –ò–º—è1+–ò–º—è2";
    filterInput.className = "filter-input";
    statsSection.before(filterInput);

    let dateShown = false;

    Promise.all(endpoints.map(ep =>
        fetch(ep.url)
            .then(r => r.json())
            .then(json => ({ json, meta: ep }))
    ))
        .then(results => {
            results.forEach(({ json, meta }) => {
                if (!dateShown && json.date) {
                    const d = json.date.replace("stats_", "").replace(".json", "");
                    const p = document.createElement("p");
                    p.className = "stats-date";
                    p.textContent = `üìÜ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ ${d}`;
                    statsSection.prepend(p);
                    dateShown = true;
                }
                renderBlock(json.data, meta);
            });
        })
        .catch(console.error);

    function renderBlock(data, { title, type }) {
        const container = document.createElement("div");
        container.className = "stat-block fancy";
        container.innerHTML = `<h3>${title}</h3>`;

        const list = document.createElement("ol");
        list.className = "stat-list";

        // –Ω–∞–π–¥—ë–º –º–∞–∫—Å–∏–º—É–º –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–æ—Å
        let maxVal = 0;
        if (data.length) {
            if (type === "level") maxVal = data[0].level;
            if (type === "arena") maxVal = data[0].rating;
            if (type === "t_level") maxVal = data[0].t_level;
            if (type === "boss") maxVal = data[0].boss_power;
            if (type === "pet") maxVal = data[0].pet.pet_level;
        }

        data.forEach((item, i) => {
            const medal = i === 0 ? "ü•á" : i === 1 ? "ü•à" : i === 2 ? "ü•â" : `${i + 1}.`;
            let pct = "0.0", metaHTML = "", valueHTML = "";

            switch (type) {
                case "relics_percent":
                    // –±–µ—Ä–µ–º —Ä–æ–≤–Ω–æ —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏—à–ª–æ –∏–∑ API
                    pct = item.value;
                    valueHTML = `<span class="value">${pct}%</span>`;
                    break;
                case "ark":
                    pct = ((item.ark_total / 2000) * 100).toFixed(1);
                    metaHTML = `<span class="meta">W:${item.ark_m} / F:${item.ark_f}</span>`;
                    valueHTML = `<span class="value">${pct}%</span>`;
                    break;
                case "souls_percent":
                    pct = item.value.toFixed(1);
                    valueHTML = `<span class="value">${pct}%</span>`;
                    break;
                case "savings":
                    pct = ((item.value / 30000000) * 100).toFixed(1);
                    valueHTML = `<span class="value">${item.value.toLocaleString()}</span>`;
                    break;
                case "t_level":
                    pct = maxVal ? ((item.t_level / maxVal) * 100).toFixed(1) : "0.0";
                    metaHTML = `<span class="meta">${item.shop_name}</span>`;
                    valueHTML = `<span class="value">${item.t_level}</span>`;
                    break;
                case "arena":
                    pct = maxVal ? ((item.rating / maxVal) * 100).toFixed(1) : "0.0";
                    metaHTML = `<span class="meta">W:${item.won} / L:${item.lost}</span>`;
                    valueHTML = `<span class="value">${item.rating}</span>`;
                    break;
                case "boss":
                    pct = maxVal ? ((item.boss_power / maxVal) * 100).toFixed(1) : "0.0";
                    metaHTML = `<span class="meta">${item.boss_name}</span>`;
                    valueHTML = `<span class="value">${item.boss_power}</span>`;
                    break;
                case "pet":
                    pct = maxVal ? ((item.pet.pet_level / maxVal) * 100).toFixed(1) : "0.0";
                    metaHTML = `<span class="meta">${item.pet.pet_name} (${item.pet.pet_class})</span>`;
                    valueHTML = `<span class="value">${item.pet.pet_level}</span>`;
                    break;
                case "level":
                    pct = maxVal ? ((item.level / maxVal) * 100).toFixed(1) : "0.0";
                    metaHTML = `<span class="meta">üéí${item.inventory_capacity}  ‚ù§Ô∏è${item.max_health}</span>`;
                    valueHTML = `<span class="value">Lvl ${item.level}</span>`;
                    break;
                case "alignment":
                    // –≤—Å–µ–≥–¥–∞ 100%, —Ç–µ–∫—Å—Ç –±–µ–∑ %
                    pct = "100.0";
                    valueHTML = `<span class="value">${item.value}</span>`;
                    break;
                default:
                    pct = (item.value / 10).toFixed(1);
                    valueHTML = `<span class="value">${pct}%</span>`;
            }

            const li = document.createElement("li");
            li.innerHTML = `
                <div class="stat-card">
                    <span class="rank">${medal}</span>
                    <span class="name">${item.godname}</span>
                    ${metaHTML}
                    ${valueHTML}
                </div>
                <div class="stat-bar">
                    <div class="fill" style="width:${pct}%"></div>
                </div>
            `;
            if (i >= 5) {
                li.classList.add("hidden-entry");
                li.style.display = "none";
            }
            list.appendChild(li);
        });

        container.appendChild(list);

        if (data.length > 5) {
            const btn = document.createElement("button");
            btn.className = "show-more-button";
            btn.textContent = "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë";
            let exp = false;
            btn.addEventListener("click", () => {
                container.querySelectorAll(".hidden-entry").forEach(el => {
                    el.style.display = exp ? "none" : "list-item";
                });
                exp = !exp;
                btn.textContent = exp ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë";
            });
            container.appendChild(btn);
        }

        statsSection.appendChild(container);

        filterInput.addEventListener("input", () => {
            const raw = filterInput.value.toLowerCase().trim();
            // —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–ª—é—Å—É, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
            const terms = raw
                .split(/\s*\+\s*/g)
                .map(t => t.trim())
                .filter(t => t.length > 0);

            list.querySelectorAll("li").forEach(li => {
                const name = li.querySelector(".name").textContent.toLowerCase();
                // –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë,
                // –∏–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω –≤—Ö–æ–¥–∏—Ç –≤ –∏–º—è
                const ok =
                    terms.length === 0 ||
                    terms.some(term => name.includes(term));
                li.style.display = ok ? "list-item" : "none";
            });
        });
    }
});